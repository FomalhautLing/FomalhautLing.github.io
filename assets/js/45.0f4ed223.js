(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{333:function(t,s,a){"use strict";a.r(s);var n=a(14),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"record"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#record"}},[t._v("#")]),t._v(" Record")]),t._v(" "),s("h2",{attrs:{id:"字典树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字典树"}},[t._v("#")]),t._v(" 字典树")]),t._v(" "),s("p",[t._v("Trie，即字典树，是一个非常强大的数据结构，可以高效处理字符串、异或最大值以及数集维护问题。而且常数非常小。")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.luogu.com.cn/problem/P2580",target:"_blank",rel:"noopener noreferrer"}},[t._v("P2580"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("板子题，直接建立字典树模拟即可")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.luogu.com.cn/problem/SP4033",target:"_blank",rel:"noopener noreferrer"}},[t._v("SP4033"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("两个思路")]),t._v(" "),s("ol",[s("li",[t._v("第一种：跑两遍，顺序读入字典树，这样可以判断后者是否是前者的前缀；然后倒序输入字典树，判断前者是否是后者的前缀")]),t._v(" "),s("li",[t._v("第二种：在插入时，如果某串没有新建尾结点，那么它是一个前缀；或者它经过了某个尾节点，那么这个尾节点的字符串是它的前缀")])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.luogu.com.cn/problem/U109895",target:"_blank",rel:"noopener noreferrer"}},[t._v("U109895"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("首先对给定的数组建立 01-字典树。然后对于每次询问，从二进制"),s("strong",[t._v("高位")]),t._v("向低位查找，如果询问数 s 当前位是 1，那么字典树优先走 0，如果是 0，优先走 1，这样保证异或后各位尽可能是 1，值也就最大")]),t._v(" "),s("p",[t._v("对于上面的选择有个技巧：$0 \\oplus 1 = 1，1 \\oplus 1 = 0$，每次只要往 $bit \\oplus 1$ 的位置走就行")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.luogu.com.cn/problem/U109897",target:"_blank",rel:"noopener noreferrer"}},[t._v("U109897"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("本题涉及字典树的删除，枚举 $s_i s_j$，每次从字典树中将它们删去，然后跑一遍 U109895，维护最大值，最后再把 $s_i s_j$ 添加回来")]),t._v(" "),s("p",[t._v("删除其实只要多给一个状态，表示这个节点被经过的次数就可")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.luogu.com.cn/problem/U109923",target:"_blank",rel:"noopener noreferrer"}},[t._v("U109923"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("字典树 + dp")]),t._v(" "),s("p",[s("em",[t._v("区间不交问题可以枚举分界点")])]),t._v(" "),s("p",[t._v("定义 $max_l[x]$ 表示区间 $[1, x]$ 内最大的异或值，$max_r[x]$ 表示区间 $[x, n]$ 内的最大异或值。那么答案就是 $O(N)$ 枚举分割点计算一遍")]),t._v(" "),s("p",[t._v("对于 $max_l[x]$，有 $max_l[x] = max(max_l[x - 1], \\oplus_i^x(a_i))$。"),s("strong",[t._v("区间异或实际上等于前缀异或的异或")]),t._v("，于是维护前缀异或，要求 $\\oplus_i^x(a_i)$，只要查找能与当前的前缀异或计算得到最大值的前缀异或即可（即字典树存前缀异或）")]),t._v(" "),s("p",[t._v("注意提前把 0 插入字典树")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("signed")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    ios"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sync_with_stdio")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tie")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tie")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nullptr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" cin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("let i in arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" cin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    trie"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" max_l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pre_xor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" max_l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    trie"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        pre_xor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        max_l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("max_l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" trie"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pre_xor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" pre_xor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        trie"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pre_xor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    trie"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reset")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" max_r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" las_xor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" max_r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    trie"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        las_xor "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^=")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        max_r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("max_r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" trie"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("las_xor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" las_xor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        trie"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("las_xor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ans "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        ans "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ans"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" max_l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" max_r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" ans "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\n'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br")])]),s("ul",[s("li",[s("a",{attrs:{href:"https://www.luogu.com.cn/problem/P4551",target:"_blank",rel:"noopener noreferrer"}},[t._v("P4551"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("任意两个节点 $<a, b>$ 路径上的异或和实质上等于 $<1, a> \\oplus <1, b>$，故 dfs 处理出所有点到 1 的路径异或，然后字典树找两个数使得其异或最大即可")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.luogu.com.cn/problem/P8306",target:"_blank",rel:"noopener noreferrer"}},[t._v("P8306"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("先把要查询的字符串丢进字典树，得到它们在字典树中的标记。然后再挨个输入数据，如果某个字符串在插入字典树的过程中中遇到了标记，说明这个标记代表的字符串是现在输入的这个的前缀")]),t._v(" "),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("字典树一般用来处理对一系列字符串的前缀查询问题，也处理最大异或，或者与异或相关的运算问题。常数 N 不好确定")]),t._v(" "),s("h2",{attrs:{id:"树状数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树状数组"}},[t._v("#")]),t._v(" 树状数组")]),t._v(" "),s("p",[t._v("树状数组最大的功能是"),s("strong",[t._v("单点修改、区间查询")])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.luogu.com.cn/problem/P3374",target:"_blank",rel:"noopener noreferrer"}},[t._v("P3374"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("板子题（单点修改，区间查询）")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.luogu.com.cn/problem/P3368",target:"_blank",rel:"noopener noreferrer"}},[t._v("P3368"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("板子题（区间修改，单点查询）")]),t._v(" "),s("p",[t._v("只要在原有的树状数组的基础上，存差分就可以了。把树状数组当差分数组使用，其前 n 项和就是位序 n 的值")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.luogu.com.cn/problem/P5057",target:"_blank",rel:"noopener noreferrer"}},[t._v("P5057"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("这题也是区间修改、单点查询，要求能对区间取反，想到异或，令树状数组维护差分异或，查询的结果就是前 n 项的异或和")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.luogu.com.cn/problem/P2068",target:"_blank",rel:"noopener noreferrer"}},[t._v("P2068"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("单点修改，区间查询，不同的是要开 ll")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.luogu.com.cn/problem/P4939",target:"_blank",rel:"noopener noreferrer"}},[t._v("P4939"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("区间修改，单点查询")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.luogu.com.cn/problem/P6225",target:"_blank",rel:"noopener noreferrer"}},[t._v("P6225"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("如果这个区间的长度是偶数，那么答案一定是 0；如果是奇数，那么答案是奇数项异或和或偶数项异或和")]),t._v(" "),s("p",[t._v("维护两个树状数组，一个存奇数，一个存偶数，query 时只要求一下前缀异或就好")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.luogu.com.cn/problem/P2880",target:"_blank",rel:"noopener noreferrer"}},[t._v("P2880"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("树状数组维护区间最值")]),t._v(" "),s("p",[t._v("树状数组原来的 query 并不能算出区间最值，需要改写为")]),t._v(" "),s("ul",[s("li",[t._v("若 $r - lowbit(r) > l$，那么可以以 $r - lowbit(r)$ 二分，又 $[r - lowbit(r), r]$ 的最值就是 $tree[r]$")]),t._v(" "),s("li",[t._v("若 $r - lowbit(r) \\le l$，那么可以从 r 分开，往下递归，期待满足上一个条件的情况发生")])]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find_max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" base"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("low_bit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tree"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find_max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("low_bit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("base"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find_max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h3",{attrs:{id:"总结-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("树状数组的题一般都是给多组询问，每个询问有两个状态，改或者查。原始的树状数组可以维护单点修改和区间查询，树状差分数组可以维护区间修改单点查询")]),t._v(" "),s("h2",{attrs:{id:"差分约束"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#差分约束"}},[t._v("#")]),t._v(" 差分约束")]),t._v(" "),s("p",[t._v("给出一组包含 $m$ 个不等式，有 $n$ 个未知数的形如：")]),t._v(" "),s("p",[t._v("$$ \\begin{cases} x_{c_1}-x_{c'"),s("em",[t._v("1}\\leq y_1 \\x")]),t._v("{c_2}-x_{c'"),s("em",[t._v("2} \\leq y_2 \\ \\cdots\\ x")]),t._v("{c_m} - x_{c'_m}\\leq y_m\\end{cases}$$")]),t._v(" "),s("p",[t._v("的不等式组，求任意一组满足这个不等式组的解。")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.luogu.com.cn/problem/P5960",target:"_blank",rel:"noopener noreferrer"}},[t._v("P5960"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("板子题，无解 => 有负环 => spfa")]),t._v(" "),s("p",[t._v("$ x_a - x_b \\le y \\Rightarrow$ 从 b 向 a 连边")]),t._v(" "),s("ul",[s("li",[s("p",[s("a",{attrs:{href:"https://www.luogu.com.cn/problem/P1993",target:"_blank",rel:"noopener noreferrer"}},[t._v("P1993"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[t._v("一些变形相关的结论：")]),t._v(" "),s("ol",[s("li",[t._v("$ x_1 - x_2\\ge y \\Rightarrow x_2 - x_1 \\le -y $")]),t._v(" "),s("li",[t._v("$ x_1 - x_2 = y \\Rightarrow x_1 - x_2 \\le y \\wedge x_2 - x_1 \\le -y $")]),t._v(" "),s("li",[t._v("$ x_1 - x_2 < y \\Rightarrow x_1 - x_2 \\le y - 1 $")]),t._v(" "),s("li",[t._v("$ x_1 - x_2 > y \\Rightarrow x_2 - x_1 \\le -y - 1 $")])])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://www.luogu.com.cn/problem/SP116",target:"_blank",rel:"noopener noreferrer"}},[t._v("SP116"),s("OutboundLink")],1)])])]),t._v(" "),s("p",[t._v("定义 $x_i$ 表示到 $i$ 左侧为止需要用的整数的个数")]),t._v(" "),s("p",[t._v("根据题意有：")]),t._v(" "),s("p",[t._v("$$\nx_b - x_{a - 1} \\ge c \\\nx_i - x_{i - 1} \\ge 0  \\\nx_{i - 1} - x_i \\ge -1\n$$")]),t._v(" "),s("p",[t._v("这是一个未知数个数为 $x_d$(d 为最大的端点)，方程个数为 $n + 2(d - 1)$ 的差分约束问题。注意此处应跑最长路。这里图天然联通，不需要超级源点")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.luogu.com.cn/problem/P2294",target:"_blank",rel:"noopener noreferrer"}},[t._v("P2294"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("定义 $x_i$ 表示到 $i$ 左侧为止的收入")]),t._v(" "),s("p",[t._v("本题的 0 号点被使用了，所以从 $n + 1$ 号点建立超级源点")])])}),[],!1,null,null,null);s.default=r.exports}}]);