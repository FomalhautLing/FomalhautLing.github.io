(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{326:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"lis-与-lcs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lis-与-lcs"}},[t._v("#")]),t._v(" LIS 与 LCS")]),t._v(" "),s("h2",{attrs:{id:"lis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lis"}},[t._v("#")]),t._v(" LIS")]),t._v(" "),s("p",[t._v("最长递增子序列（Longest Increasing Subsequence. LIS）要求在序列上求出一个"),s("strong",[t._v("严格递增")]),t._v("的子序列，使得其有最长的长度（子序列不需要是原序列中连续的一段）")]),t._v(" "),s("p",[t._v("假设序列为"),s("Latex",[t._v("A[1..n]")]),t._v(" 定义 "),s("Latex",[t._v("min\\_of[i]")]),t._v(" 表示所有长度为 "),s("Latex",[t._v("i")]),t._v(" 的递增子序列中，结尾元素的最小值")],1),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("lcs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvector"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("min_of")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("inf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("min_of"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("lcs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" min_of"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("lcs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lower_bound")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("min_of "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" min_of "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" lcs "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("在遍历的过程中，如果当前元素大于 "),s("Latex",[t._v("min\\_of[lcs]")]),t._v("，则它可以接在当前的 "),s("Latex",[t._v("lcs")]),t._v(" 后，生成一个更长的 "),s("Latex",[t._v("lcs")]),s("br"),t._v("\n否则，由于 "),s("Latex",[t._v("min\\_of")]),t._v(" 天然单调，可以二分地去更新它")],1),t._v(" "),s("p",[t._v("时间复杂度 "),s("Latex",[t._v("O(n\\log n)")])],1),t._v(" "),s("p",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/121032448",target:"_blank",rel:"noopener noreferrer"}},[t._v("推荐阅读"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"lcs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lcs"}},[t._v("#")]),t._v(" LCS")]),t._v(" "),s("p",[t._v("最长公共子序列（Longest Common Subsequence. LCS）要求在两个序列中寻找一个"),s("strong",[t._v("相同")]),t._v("的子序列，使得其有最长的长度（子序列不需要是原序列中连续的一段）")]),t._v(" "),s("p",[t._v("假设两个序列分别为 "),s("Latex",[t._v("S_1")]),t._v(" 和 "),s("Latex",[t._v("S_2")]),t._v("，定义状态 "),s("Latex",[t._v("dp[i][j]")]),t._v(" 表示 "),s("Latex",[t._v("S_1[0, i]")]),t._v(" 和 "),s("Latex",[t._v("S_2[0, j]")]),t._v(" 的 LCS，有转移方程")],1),t._v(" "),s("Latex",[t._v("dp[i][j] = \\begin{cases} dp[i - 1][j - 1] + 1 & S_1[i] = S_2[j]\\\\ \\max(dp[i][j - 1], dp[i - 1][j]) & otherwise.\\end{cases}")]),t._v(" "),s("p",[t._v("时间复杂度 "),s("Latex",[t._v("O(|S_1||S_2|)")]),t._v("。或者还可以递归求解")],1)],1)}),[],!1,null,null,null);s.default=e.exports}}]);